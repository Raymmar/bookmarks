import express from "express";
import { Client, auth } from "twitter-api-sdk";
import dotenv from "dotenv";
dotenv.config();

const app = express();

const URL = process.env.URL as string || 'http://127.0.0.1';
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 3000;

/**
 * OAuth 2.0 Settings instructions: 
 * - Use the Twitter Developer Portal to create a Project and an App.
 * - Configure your App by selecting the cog icon next to the App you wish to use.
 * - Click Edit under User authentication settings.
 * - Under OAuth 2.0 Settings, enable OAuth 2.0. Select "Web App" as your Type of App.
 * - Under General Authentication Settings make sure your Callback URI / Redirect URL is the hosted URL of Web App. Save your changes.
 */

const authClient = new auth.OAuth2User({
  client_id: process.env.CLIENT_ID as string,
  client_secret: process.env.CLIENT_SECRET as string,
  callback: `${URL}:${PORT}/callback`,
  scopes: ["bookmark.read","tweet.read","users.read"],
});
const client = new Client(authClient);
  
const STATE = "my-state";

app.get("/callback", async function (req, res) {
  try {
    const { code, state } = req.query;
    if (state !== STATE) return res.status(500).send("State isn't matching");
    await authClient.requestAccessToken(code as string);
    res.redirect("/tweets");
  } catch (error) {
    console.log(error);
  }
});
  
app.get("/login", async function (req, res) {
  const authUrl = authClient.generateAuthURL({
    state: STATE,
    code_challenge_method: "s256",
  });
  res.redirect(authUrl);
});

app.get("/revoke", async function (req, res) {
  try {
    const response = await authClient.revokeAccessToken();
    res.send(response);
  } catch (error) {
    console.log(error);
  }
});

app.get("/tweets", async function (req, res) {
  try {
    const response = await client.bookmarks.getUsersIdBookmarks({
    "tweet.fields": [
        "article",
        "attachments",
        "author_id",
        "card_uri",
        "community_id",
        "context_annotations",
        "conversation_id",
        "created_at",
        "display_text_range",
        "edit_controls",
        "edit_history_tweet_ids",
        "entities",
        "geo",
        "id",
        "in_reply_to_user_id",
        "lang",
        "media_metadata",
        "non_public_metrics",
        "note_tweet",
        "organic_metrics",
        "possibly_sensitive",
        "promoted_metrics",
        "public_metrics",
        "referenced_tweets",
        "reply_settings",
        "scopes",
        "source",
        "text",
        "withheld"
    ],
    "expansions": [
        "article.cover_media",
        "article.media_entities",
        "attachments.media_keys",
        "attachments.media_source_tweet",
        "attachments.poll_ids",
        "author_id",
        "edit_history_tweet_ids",
        "entities.mentions.username",
        "geo.place_id",
        "in_reply_to_user_id",
        "entities.note.mentions.username",
        "referenced_tweets.id",
        "referenced_tweets.id.attachments.media_keys",
        "referenced_tweets.id.author_id"
    ],
    "media.fields": [
        "alt_text",
        "duration_ms",
        "height",
        "media_key",
        "non_public_metrics",
        "organic_metrics",
        "preview_image_url",
        "promoted_metrics",
        "public_metrics",
        "type",
        "url",
        "variants",
        "width"
    ],
    "poll.fields": [
        "duration_minutes",
        "end_datetime",
        "id",
        "options",
        "voting_status"
    ],
    "user.fields": [
        "affiliation",
        "confirmed_email",
        "connection_status",
        "created_at",
        "description",
        "entities",
        "id",
        "is_identity_verified",
        "location",
        "most_recent_tweet_id",
        "name",
        "parody",
        "pinned_tweet_id",
        "profile_banner_url",
        "profile_image_url",
        "protected",
        "public_metrics",
        "receives_your_dm",
        "subscription",
        "subscription_type",
        "url",
        "username",
        "verified",
        "verified_followers_count",
        "verified_type",
        "withheld"
    ],
    "place.fields": [
        "contained_within",
        "country",
        "country_code",
        "full_name",
        "geo",
        "id",
        "name",
        "place_type"
    ]
  });
  
  console.log("response", JSON.stringify(response, null, 2));
    res.send(response);
  } catch (error) {
    console.log("tweets error", error);
  }
});

app.listen(PORT, () => {
  console.log(`Go here to login: ${URL}:${PORT}/login`);
});
  